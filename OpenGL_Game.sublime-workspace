{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"glfwWin",
				"glfwWindowShouldClose"
			],
			[
				"vert",
				"vertices"
			],
			[
				"splits",
				"splitString2"
			],
			[
				"split",
				"splitString"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include \"ModelParser.h\"\n\nModelParser::ModelParser(std::string str)\n{	\n	std::ifstream data(str.c_str(), std::ios::in);\n	if (data.is_open())\n	{\n		std::string line;\n		float num;\n		std::vector<glm::vec2> textureCoordsHolder;\n		std::vector<glm::vec3> vertexNormalsHolder;\n		while (getline(data, line))\n		{\n			if (line[0] == 'v' && line[1] == ' ')\n			{\n				line = line.substr(2);\n				std::vector<std::string> strings = splitString(line, \" \");\n				glm::vec3 vertex;\n				for(int i = 0; i < 3; i++)\n				{\n					std::stringstream floats(strings[i]);\n					if(floats >> num)\n					{\n						vertex[i] = num;\n					}\n				}\n				vertices.push_back(vertex);\n			}\n			else if (line[0] == 'v' && line[1] == 't')\n			{\n				line = line.substr(2);\n				std::vector<std::string> strings = splitString(line, \" \");\n				glm::vec2 coords;\n				for(int i = 0; i < 2; i++)\n				{\n					std::stringstream floats(strings[i]);\n					if(floats >> num)\n					{\n						coords[i] = num;\n					}\n				}\n				textureCoordsHolder.push_back(coords);\n			}\n			else if (line[0] == 'v' && line[1] == 'n')\n			{\n				line = line.substr(2);\n				std::vector<std::string> strings = splitString(line, \" \");\n				glm::vec3 norms;\n				for(int i = 0; i < 3; i++)\n				{\n					std::stringstream floats(strings[i]);\n					if(floats >> num)\n					{\n						norms[i] = num;\n					}\n				}\n				vertexNormalsHolder.push_back(norms);\n			}\n			else if (line[0] == 'f' && line[1] == ' ')\n			{\n				line = line.substr(2);\n				std::vector<std::string> strings = splitString(line, \" \");\n				std::vector<std::string> vec1 = splitString(strings[0], \"/\");\n				std::vector<std::string> vec2 = splitString(strings[1], \"/\");\n				std::vector<std::string> vec3 = splitString(strings[2], \"/\");\n				processVertex(vec1, textureCoordsHolder, vertexNormalsHolder);\n				processVertex(vec2, textureCoordsHolder, vertexNormalsHolder);\n				processVertex(vec3, textureCoordsHolder, vertexNormalsHolder);\n			}\n		}\n	}\n}\n\n\nstd::vector<std::string> ModelParser::splitString(std::string str, std::string character)\n{\n	std::vector < std::string > strings;\n	if (character == \" \")\n	{\n		std::stringstream ss(str);\n		std::string sub;\n		while (ss >> sub)\n		{\n			strings.push_back(sub);\n		}\n	}\n	else\n	{\n		char* sf;\n		char* sd = &str[0];\n		char* chars = NULL;\n		sf = strtok(sd, character.c_str());\n		while (sf != NULL)\n		{\n			std::stringstream ss(sf);\n			std::string sub;\n			ss >> sub;\n			strings.push_back(sub);\n			sf = strtok(NULL, character.c_str());\n		}\n\n	}\n	return strings;\n}\n\n\nvoid ModelParser::processVertex(std::vector<std::string> strings, std::vector<glm::vec2> textureCoordsHolder, std::vector<glm::vec3> vertexNormalsHolder)\n{\n	std::stringstream sa(strings[0]);\n	float num;\n	if(sa >> num)\n	{\n		num -= 1;\n		indicies.push_back(num);\n	}\n	std::stringstream sb(strings[1]);\n	if(sb >> num)\n	{\n		num -= 1;\n		textureCoords.push_back(textureCoordsHolder[num]);\n		textureCoords[textureCoords.size()-1][1] = 1 - textureCoords[textureCoords.size()-1][1];\n	}\n	std::stringstream sc(strings[2]);\n	if(sc >> num)\n	{\n		num -= 1;\n		vertexNormals.push_back(vertexNormalsHolder[num]);\n	}\n}\n\nModelParser::~ModelParser()\n{\n}\n\n",
			"file": "src/code/ParsingMech/ModelParser.cpp",
			"file_size": 3091,
			"file_write_time": 130921046302299779,
			"settings":
			{
				"buffer_size": 3092,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/code/MainGame/MainGameLoop.cpp",
			"settings":
			{
				"buffer_size": 2387,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/headers/ModelParser.h",
			"settings":
			{
				"buffer_size": 637,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/subash/Documents/ComputerScience/OpenGL_Game",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/linuxBuild",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/shaders",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/Camera",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/Entities",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/Loading",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/MainGame",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/Math",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/Models",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/ParsingMech",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/RenderMech",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/ShaderMech",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/headers",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/windowsBuild",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/windowsLib"
	],
	"file_history":
	[
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/headers/ModelParser.h",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/headers/Camera.h",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/Camera/Camera.cpp",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/Loading/Loader.cpp",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/Models/Model.cpp",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/headers/Model.h",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/RenderMech/Renderer.cpp",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/MainGame/MainGameLoop.cpp",
		"/home/subash/.config/sublime-text-3/Packages/User/Distraction Free.sublime-settings",
		"/home/subash/.config/sublime-text-3/Packages/User/C++.sublime-settings",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/Math/Matricies.cpp",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/headers/Matricies.h",
		"/home/subash/Desktop/test.cpp",
		"/home/subash/Desktop/test2.cpp",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/headers/Renderer.h",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/headers/Loader.h",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/ShaderMech/AbstractShader.cpp",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/shaders/TestVert",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/shaders/TestFrag",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/linuxBuild/core",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/headers/AbstractShader.h",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/headers/EntityShader.h",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/ShaderMech/EntityShader.cpp",
		"/home/subash/Documents/valgrind-3.11.0/README",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/linuxBuild/Makefile",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/linuxBuild/OpenGL_Game",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/linuxBuild/Loader.o",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/res/box.obj",
		"/home/subash/Desktop/ShellTest",
		"/home/subash/Desktop/test2.o",
		"/home/subash/Downloads/displayList/src/Timer.cxx",
		"/home/subash/Downloads/displayList/src/main.cpp",
		"/home/subash/Downloads/displayList/src/Makefile.win",
		"/home/subash/Downloads/displayList/src/teapot.h",
		"/home/subash/Downloads/guake-0.8.0/README.rst",
		"/home/subash/Downloads/guake-master/INSTALL",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/windowsBuild/Makefile",
		"/usr/share/applications/defaults.list.old",
		"/usr/share/applications/defaults.list",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/Entities/Entity.cpp",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/OpenGL_Game.sublime-project",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/OpenGL_Game.sublime-workspace.orig",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/Makefile",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/windowsMake/Makefile",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/linuxMake/Makefile",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/linuxMake",
		"/home/subash/Desktop/OpenGL_Game/src/code/MainGame/MainGame.cpp",
		"/home/subash/Desktop/OpenGL_Game/shaders/TestVert",
		"/home/subash/Desktop/OpenGL_Game/shaders/TestFrag",
		"/home/subash/Documents/ComputerScience/OpenGL_Game/src/code/MainGame/MainGame.cpp",
		"/home/subash/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/subash/C/Program Files/Sublime Text 3/changelog.txt",
		"/media/subash/01D0A8AC4CE34B30/SHARED/OpenGL_Game/src/code/Entities/Entity.cpp"
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"d",
			">\n",
			")\n",
			");\n",
			"stringStrea",
			"tvpVector",
			"gedit",
			"$@\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/code/ParsingMech/ModelParser.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3092,
						"regions":
						{
						},
						"selection":
						[
							[
								3092,
								3092
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1888.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/code/MainGame/MainGameLoop.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2387,
						"regions":
						{
						},
						"selection":
						[
							[
								1488,
								1488
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 576.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/headers/ModelParser.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 637,
						"regions":
						{
						},
						"selection":
						[
							[
								369,
								369
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 29.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "OpenGL_Game.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
